
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { toast } from "sonner";
import { Loader2 } from "lucide-react";
import { usePoolSystem } from "@/hooks/usePoolSystem";
import { MiningPool, MemberRank } from "@/types/pools";

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Switch } from "@/components/ui/switch";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";

// Define form schema for pool creation
const poolFormSchema = z.object({
  name: z.string().min(3, { message: "Havuz adı en az 3 karakter olmalıdır" }).max(50),
  description: z.string().min(10, { message: "Açıklama en az 10 karakter olmalıdır" }).max(500),
  level: z.string().transform(val => parseInt(val)),
  isPublic: z.boolean().default(true),
  minRequirements: z.object({
    miningDays: z.string().transform(val => parseInt(val)),
    minBalance: z.string().transform(val => parseInt(val)),
  }),
  minRank: z.string().default(MemberRank.ROOKIE),
});

type PoolFormValues = z.infer<typeof poolFormSchema>;

export default function CreatePoolForm() {
  const { createPool } = usePoolSystem();
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Initialize form with default values
  const form = useForm<PoolFormValues>({
    resolver: zodResolver(poolFormSchema),
    defaultValues: {
      name: "",
      description: "",
      level: "1",
      isPublic: true,
      minRequirements: {
        miningDays: "0",
        minBalance: "0",
      },
      minRank: MemberRank.ROOKIE,
    },
  });

  // Handle form submission
  const onSubmit = async (values: PoolFormValues) => {
    setIsSubmitting(true);
    try {
      // Format pool data for creation
      const poolData: MiningPool = {
        poolId: "", // Will be generated by the service
        name: values.name,
        owner: "", // Will be set by the service
        level: values.level,
        memberCount: 0,
        description: values.description,
        isPublic: values.isPublic,
        minRequirements: {
          miningDays: values.minRequirements.miningDays,
          minBalance: values.minRequirements.minBalance,
        },
        minRank: values.minRank,
        createdAt: null // Will be set by the service
      };

      const result = await createPool(poolData);

      if (result) {
        toast.success("Havuz başarıyla oluşturuldu!");
        form.reset();
      } else {
        toast.error("Havuz oluşturulurken bir hata oluştu.");
      }
    } catch (error) {
      toast.error("Havuz oluşturulurken bir hata oluştu: " + (error as Error).message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card className="bg-gradient-to-br from-purple-900/30 to-indigo-900/30 border-purple-800/30">
      <CardHeader>
        <CardTitle className="text-xl text-purple-200">Yeni Havuz Oluştur</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-5">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-purple-100">Havuz Adı</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="Elit Madenciler" 
                      {...field} 
                      className="bg-gray-900/60 border-gray-700"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-purple-100">Açıklama</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="Havuzunuz hakkında bilgi verin..." 
                      {...field} 
                      className="bg-gray-900/60 border-gray-700 min-h-24"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
              <FormField
                control={form.control}
                name="level"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-purple-100">Havuz Seviyesi</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value.toString()}
                    >
                      <FormControl>
                        <SelectTrigger className="bg-gray-900/60 border-gray-700">
                          <SelectValue placeholder="Seviye seçin" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="1">Seviye 1 (100 üye)</SelectItem>
                        <SelectItem value="2">Seviye 2 (250 üye)</SelectItem>
                        <SelectItem value="3">Seviye 3 (500 üye)</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="isPublic"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between p-3 border border-gray-800 rounded-lg bg-gray-900/40">
                    <div className="space-y-0.5">
                      <FormLabel className="text-purple-100">Herkese Açık</FormLabel>
                      <p className="text-xs text-gray-400">Havuz listede görünür olacak</p>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
            </div>
            
            <div className="bg-indigo-950/30 p-4 rounded-lg border border-indigo-900/30">
              <h3 className="text-indigo-200 font-medium mb-3">Katılım Gereksinimleri</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
                <FormField
                  control={form.control}
                  name="minRequirements.miningDays"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-indigo-100">Min. Madencilik Günü</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min={0}
                          {...field} 
                          className="bg-gray-900/60 border-gray-700"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="minRequirements.minBalance"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-indigo-100">Min. NC Bakiyesi</FormLabel>
                      <FormControl>
                        <Input 
                          type="number"
                          min={0}
                          {...field} 
                          className="bg-gray-900/60 border-gray-700"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="minRank"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-indigo-100">Min. Rütbe</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger className="bg-gray-900/60 border-gray-700">
                            <SelectValue placeholder="Rütbe seçin" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value={MemberRank.ROOKIE}>{MemberRank.ROOKIE}</SelectItem>
                          <SelectItem value={MemberRank.MINER}>{MemberRank.MINER}</SelectItem>
                          <SelectItem value={MemberRank.LEADER}>{MemberRank.LEADER}</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            <Button 
              type="submit" 
              className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-600 hover:to-purple-700"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" /> 
                  Havuz Oluşturuluyor...
                </>
              ) : (
                "Havuz Oluştur"
              )}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
